package functions;

import types.RGB24Type;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFloat;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStruct;

public class ColourFunctions extends Kernel{
	/*Blend will blend foreground into background based on foreground's alpha propery*/
	protected ColourFunctions(KernelParameters parameters) {
		super(parameters);
		// TODO Auto-generated constructor stub
	}

	public static DFEStruct Blend(DFEStruct foreground, DFEStruct background)
	{
		Kernel k = background.getKernel();

		DFEFloat tfloat = dfeFloat(8, 24);
		DFEFix tint = dfeUInt(8);

		DFEVar a = foreground["A"];
		DFEVar af = a.cast(tfloat);

		DFEVar pf = af / 255.0f;
		DFEVar pb = 1.0f - pf;

		DFEVar br = background["R"]; br = br.cast(tfloat);
		DFEVar bg = background["G"]; bg = bg.cast(tfloat);
		DFEVar bb = background["B"]; bb = bb.cast(tfloat);

		DFEVar fr = foreground["R"]; fr = fr.cast(tfloat);
		DFEVar fg = foreground["G"]; fg = fg.cast(tfloat);
		DFEVar fb = foreground["B"]; fb = fb.cast(tfloat);

		DFEVar r = (br * pb) + (fr * pf); r = r.cast(tint);
		DFEVar g = (bg * pb) + (fg * pf); g = g.cast(tint);
		DFEVar b = (bb * pb) + (fb * pf); b = b.cast(tint);


		DFEStruct colour = new RGB24Type().FromRGB(r,g,b,k);

		return colour;
	}
}
