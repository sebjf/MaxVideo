package functions;

import types.fRGBA;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

public class ColourFunctions extends Kernel{
	protected ColourFunctions(KernelParameters parameters) {
		super(parameters);
		// TODO Auto-generated constructor stub
	}

	/* Blends foreground (f) into background (b) based on Alpha of foreground. Returned value has alpha the same as
	 * background.
	 * For example:
	 * 	r_final = background.r * (1 - foreground.a) + (foreground.r * foreground.a);
	 * 	a_final = background.a;
	 * */
	public static fRGBA Blend(fRGBA f, fRGBA b)
	{
		DFEVar pb = 1.0f - f.m_A;

		DFEVar br = (b.m_R * pb) + (f.m_R * f.m_A);
		DFEVar bg = (b.m_G * pb) + (f.m_G * f.m_A);
		DFEVar bb = (b.m_B * pb) + (f.m_B * f.m_A);

		return new fRGBA(br, bg, bb, b.m_A);
	}

	/* Performs an element-wise multiplication. Does not clip or normalise the results. */
	public static fRGBA Multiply(fRGBA a, fRGBA b)
	{
		DFEVar mr = a.m_R * b.m_R;
		DFEVar mg = a.m_G * b.m_G;
		DFEVar mb = a.m_B * b.m_B;
		DFEVar ma = a.m_A * b.m_A;

		return new fRGBA(mr,mg,mb,ma);
	}
}
