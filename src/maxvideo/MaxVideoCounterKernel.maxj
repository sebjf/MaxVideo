package maxvideo;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

import displaystandards.DisplayStandard;

public class MaxVideoCounterKernel  extends Kernel {

	public static class CounterOutput
	{
		public CounterOutput(String postfix, boolean sanitised)
		{
			m_sanitised = sanitised;
			m_postfix = postfix;
		}

		String m_postfix;
		boolean m_sanitised;
	}

	public MaxVideoCounterKernel(KernelParameters parameters, DisplayStandard displayStandard, CounterOutput... outputs) {
		super(parameters);

		flush.disabled();

		CounterChain pixelCounterChain = control.count.makeCounterChain(constant.var(true));
		DFEVar y = pixelCounterChain.addCounter(displayStandard.TotalHeight, 1);
		DFEVar x = pixelCounterChain.addCounter(displayStandard.TotalWidth, 1);

		DFEVar sanitised_x = x.cast(dfeInt(16)) - displayStandard.H_Active_Start;
		DFEVar sanitised_y = y.cast(dfeInt(16)) - displayStandard.V_Active_Start;

		for (CounterOutput output : outputs)
		{
			if(output.m_sanitised)
			{
				io.output("x" + output.m_postfix, dfeInt(16)) <== (sanitised_x < 0) ? constant.var(0) : sanitised_x;
				io.output("y" + output.m_postfix, dfeInt(16)) <== (sanitised_y < 0) ? constant.var(0) : sanitised_y;
			}
			else
			{
				io.output("x" + output.m_postfix, dfeInt(16)) <== x.cast(dfeInt(16));
				io.output("y" + output.m_postfix, dfeInt(16)) <== y.cast(dfeInt(16));
			}

		}

	}


}
