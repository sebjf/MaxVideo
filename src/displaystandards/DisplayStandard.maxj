package displaystandards;

import com.maxeler.maxcompiler.v2.managers.DFEManager;


public class DisplayStandard {

	public enum VideoProtocol
	{
		DVISingleLink,
		DVIDualLink
	}

	private DisplayStandard(){
		sanitiseCounters = true;
		enableHalfPatternInput = false;
		forceClock = false;
	}

	public float PixelClock;

	public int H_Front_Porch;
	public int H_Sync;
	public int H_Back_Porch;
	public int H_Active;
	public int V_Front_Porch;
	public int V_Sync;
	public int V_Back_Porch;
	public int V_Active;
	public boolean H_Polarity;
	public boolean V_Polarity;

	public int TotalWidth;
	public int TotalHeight;

	public int H_Active_Start;
	public int H_Blank_Start;
	public int V_Active_Start;
	public int V_Blank_Start;

	public boolean sanitiseCounters;
	public boolean enableHalfPatternInput;

	public boolean forceClock;

	public void InitialiseFromXOrgModeline(String modeline)
	{
		String[] modeline_elems = modeline.split("\\s+");

		int i = 0;

		if(modeline_elems[i].contains("Modeline"))
		{
			i = 2;
		}

		PixelClock = Float.parseFloat(modeline_elems[i]);

		H_Active = Integer.parseInt(modeline_elems[i + 1]);
		H_Front_Porch = Integer.parseInt(modeline_elems[i + 2]) - H_Active;
		H_Sync = Integer.parseInt(modeline_elems[i + 3]) - Integer.parseInt(modeline_elems[i + 2]);
		H_Back_Porch = Integer.parseInt(modeline_elems[i + 4]) - Integer.parseInt(modeline_elems[i + 3]);

		V_Active = Integer.parseInt(modeline_elems[i + 5]);
		V_Front_Porch = Integer.parseInt(modeline_elems[i + 6]) - V_Active;
		V_Sync = Integer.parseInt(modeline_elems[i + 7]) - Integer.parseInt(modeline_elems[i + 6]);
		V_Back_Porch = Integer.parseInt(modeline_elems[i + 8]) - Integer.parseInt(modeline_elems[i + 7]);

		finalise();
	}

	public void AddMaxFileConstants(DFEManager manager)
	{
		manager.addMaxFileConstant("DisplayTotalWidth", TotalWidth);
		manager.addMaxFileConstant("DisplayTotalHeight", TotalHeight);
		manager.addMaxFileConstant("DisplayActiveWidth", H_Active);
		manager.addMaxFileConstant("DisplayActiveHeight", V_Active);
	}

	public float getDisplayClock()
	{
		if(forceClock)
		{
			return PixelClock;
		}
		if(isDualLink()){
			return PixelClock / 2.0f;
		}
		return PixelClock;
	}

	public VideoProtocol getVideoConfiguration()
	{
		if(isDualLink()){
			return VideoProtocol.DVIDualLink;
		}
		return VideoProtocol.DVISingleLink;
	}

	public boolean isDualLink()
	{
		if(PixelClock > 165){
			return true;
		}
		return false;
	}

	private void finalise(){
		TotalWidth = H_Front_Porch + H_Sync + H_Back_Porch + H_Active;
		TotalHeight = V_Front_Porch + V_Sync + V_Back_Porch + V_Active;

		H_Active_Start = H_Sync + H_Back_Porch;
		H_Blank_Start = H_Active_Start + H_Active;
		V_Active_Start = V_Sync + V_Back_Porch;
		V_Blank_Start = V_Active_Start + V_Active;

		System.out.println("H Active:" + H_Active);
		System.out.println("H Front Porch:" + H_Front_Porch);
		System.out.println("H Sync Width:" + H_Sync);
		System.out.println("H Back Porch:" + H_Back_Porch);
		System.out.println("V Active:" + V_Active);
		System.out.println("V Front Porch:" + V_Front_Porch);
		System.out.println("V Sync Width:" + V_Sync);
		System.out.println("V Back Porch:" + V_Back_Porch);
	}

	public static DisplayStandard make_debug(int width, int height)
	{
		DisplayStandard display = new DisplayStandard();

		display.PixelClock = 65;

		display.H_Front_Porch = 1;
		display.H_Sync = 2;
		display.H_Back_Porch = 1;
		display.H_Active = width;
		display.V_Front_Porch = 1;
		display.V_Sync = 2;
		display.V_Back_Porch = 1;
		display.V_Active = height;

		display.H_Polarity = false;
		display.V_Polarity = false;

		display.finalise();

		return display;
	}

	public static DisplayStandard make_debug_256x256()
	{
		DisplayStandard display = new DisplayStandard();

		display.PixelClock = 65;

		display.H_Front_Porch = 1;
		display.H_Sync = 2;
		display.H_Back_Porch = 1;
		display.H_Active = 252;
		display.V_Front_Porch = 1;
		display.V_Sync = 2;
		display.V_Back_Porch = 1;
		display.V_Active = 252;

		display.H_Polarity = false;
		display.V_Polarity = false;

		display.finalise();

		return display;
	}

	public static DisplayStandard make_1024x768(float pixelclock){

		DisplayStandard display = new DisplayStandard();

		display.PixelClock = pixelclock;
		display.forceClock = true;

		display.H_Front_Porch = 24;
		display.H_Sync = 136;
		display.H_Back_Porch = 160;
		display.H_Active = 1024;
		display.V_Front_Porch = 3;
		display.V_Sync = 6;
		display.V_Back_Porch = 29;
		display.V_Active = 768;

		display.H_Polarity = false;
		display.V_Polarity = false;

		display.finalise();

		return display;
	}


	public static DisplayStandard make_1280x1024x60_modeline()
	{
		DisplayStandard display = new DisplayStandard();
		display.InitialiseFromXOrgModeline("Modeline \"1280x1024_60.00\"  109.00  1280 1368 1496 1712  1024 1027 1034 1063 -hsync +vsync");
		return display;
	}

	public static DisplayStandard make_1280x1024x60_incorrect()
	{
		DisplayStandard display = new DisplayStandard();
		display.InitialiseFromXOrgModeline("Modeline \"1280x1024_60.00\"  109.00  1250 1368 1496 1712  1024 1027 1034 1063 -hsync +vsync");
		return display;
	}

	public static DisplayStandard make_1024x768x60(){

		DisplayStandard display = new DisplayStandard();

		display.PixelClock = 65;

		display.H_Front_Porch = 24;
		display.H_Sync = 136;
		display.H_Back_Porch = 160;
		display.H_Active = 1024;
		display.V_Front_Porch = 3;
		display.V_Sync = 6;
		display.V_Back_Porch = 29;
		display.V_Active = 768;

		display.H_Polarity = false;
		display.V_Polarity = false;

		display.finalise();

		return display;
	}

	public static DisplayStandard make_1280x1024x60(){

		DisplayStandard display = new DisplayStandard();

		display.PixelClock = 108;

		display.H_Active = 1280;
		display.H_Front_Porch = 48;
		display.H_Sync = 112;
		display.H_Back_Porch = 248;

		display.V_Active = 1024;
		display.V_Front_Porch = 1;
		display.V_Sync = 3;
		display.V_Back_Porch = 38;

		display.H_Polarity = true;
		display.V_Polarity = true;

		display.finalise();

		return display;
	}

	public static DisplayStandard make_RiftDK2(){

		DisplayStandard display = new DisplayStandard();

		display.InitialiseFromXOrgModeline("165.0  1080 1113 1123 1138  1920 1921 1927 1933");

		//From xrandr --verbose run on DK2 screen on CentOS
		// 1080x1920 (0x372)  165.0MHz +HSync -VSync *current +preferred
	    //   h: width  1080 start 1113 end 1123 total 1138 skew    0 clock  145.0KHz
	    //   v: height 1920 start 1921 end 1927 total 1933           clock   75.0Hz

		display.finalise();

		return display;
	}

	public static DisplayStandard make_RiftDK2_Half(){

		DisplayStandard display = new DisplayStandard();

		display.PixelClock = 98.3076f;

		display.H_Front_Porch = 56; //Horizontal Offset
		display.H_Sync = 72;
		display.H_Back_Porch = 128; 	//Blanking Period - (Front Porch + Sync Width)
		display.H_Active = 720;
		display.V_Front_Porch = 3; 	//Vertical Offset
		display.V_Sync = 10;
		display.V_Back_Porch = 50; 	//Blanking Period - (Front Porch + Sync Width)
		display.V_Active = 1280;

		display.H_Polarity = true;
		display.V_Polarity = true;

		display.finalise();

		return display;
	}

	public static DisplayStandard make_1280x1024x75(){

		DisplayStandard display = new DisplayStandard();

		display.PixelClock = 137.37f;

		display.H_Front_Porch = 16;
		display.H_Sync = 144;
		display.H_Back_Porch = 248;
		display.H_Active = 1280;
		display.V_Front_Porch = 1;
		display.V_Sync = 3;
		display.V_Back_Porch = 38;
		display.V_Active = 1024;

		display.H_Polarity = true;
		display.V_Polarity = true;

		display.finalise();

		return display;
	}

	public static DisplayStandard make_1920x1080x60(){

		DisplayStandard display = new DisplayStandard();

		display.PixelClock = 182.5f;

		display.H_Front_Porch = 32;
		display.H_Sync = 696;
		display.H_Back_Porch = 32;
		display.H_Active = 1920;
		display.V_Front_Porch = 22;
		display.V_Sync = 11;
		display.V_Back_Porch = 22;
		display.V_Active = 1080;

		display.H_Polarity = false;
		display.V_Polarity = false;

		display.finalise();

		return display;
	}

	public static DisplayStandard make_1024x768x150(){

		DisplayStandard display = new DisplayStandard();

		display.PixelClock = 162.48f;

		display.H_Front_Porch = 24;
		display.H_Sync = 136;
		display.H_Back_Porch = 160;
		display.H_Active = 1024;
		display.V_Front_Porch = 3;
		display.V_Sync = 6;
		display.V_Back_Porch = 29;
		display.V_Active = 768;

		display.H_Polarity = false;
		display.V_Polarity = false;

		display.finalise();

		return display;
	}

	//http://www.monitortests.com/forum/Thread-Overclock-Asus-VG248QE-720p-200hz
	public static DisplayStandard make_1280x720x150(){

		DisplayStandard display = new DisplayStandard();

		display.PixelClock = 143.5f;//149.54f;

		display.H_Active = 1280;
		display.H_Front_Porch = 24;
		display.H_Sync = 32;
		display.H_Back_Porch = 24;

		display.V_Active = 720;
		display.V_Front_Porch = 3;
		display.V_Sync = 5;
		display.V_Back_Porch = 5;

		display.H_Polarity = true;
		display.V_Polarity = false;

		display.finalise();

		return display;
	}

	public static DisplayStandard make_1920x1080x149(){

		DisplayStandard display = new DisplayStandard();

		display.PixelClock = 328.52f;

		display.H_Front_Porch = 24;
		display.H_Sync = 32;
		display.H_Back_Porch = 32;
		display.H_Active = 1920;
		display.V_Front_Porch = 3;
		display.V_Sync = 5;
		display.V_Back_Porch = 10;
		display.V_Active = 1080;

		display.H_Polarity = true;
		display.V_Polarity = true;

		display.finalise();

		return display;
	}

	public double[] getParametersList()
	{
		double[] timings = new double[9];
		timings[0] = PixelClock;
		timings[1] = H_Front_Porch;
		timings[2] = H_Sync;
		timings[3] = H_Back_Porch;
		timings[4] = H_Active;
		timings[5] = V_Front_Porch;
		timings[6] = V_Sync;
		timings[7] = V_Back_Porch;
		timings[8] = V_Active;
		timings[9] = H_Polarity ? 1 : 0;
		timings[10] = V_Polarity ? 1 : 0;

		timings[11] = TotalWidth;
		timings[12] = TotalHeight;

		return timings;
	}
}
